#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'
require 'yaml'

include FileUtils

VERSION = '0.0.5'

def sh(cmd)
  if @options[:quiet]
    %x{#{cmd}}
  else
    puts %x{#{cmd}}
  end
end

def prompt(label, alt)
  print(label)
  input = STDIN.gets.chomp
  input == '' ? alt : input
end

def confirm(label)
  if @options[:autoconfirm]
    yield
  else
    case prompt("#{label} [Y/n]: ", 'y').downcase
    when 'y', 'yes'
      yield
    when 'n', 'no'
      exit 0
    else
      puts "Huh?... Don't know what you mean. Exiting!"
      exit 1
    end
  end
end

def error(message)
  puts "[ERROR] #{message}"
  exit 1
end

def config_error(key)
  error("Missing configuration key '#{key}' in '#{@config_file}'.")
end

def info(message)
  puts "[INFO] #{message}"
end

def parse_app_name
  @app_name = if ARGV.first
               ARGV.first.chomp
             else
               puts "What's your app's name? "
               @app_name = STDIN.gets.chomp
             end
end

def ensure_config_dir_exists
  @config_dir = File.join(ENV['HOME'], '.config/kick-it')
  mkdir_p @config_dir
end

def ensure_config_file_exists
  @config_file = File.join(@config_dir, 'config.yml')

  unless File.exists?(@config_file)
    info "Generating initial config in '#{@config_file}'. You may wish to change it."
    open(@config_file, 'w') do |f|
      f.puts %{# Configuration for "Kick It!".
# See https://github.com/kostia/kick-it for details.
#
# Where to put the generated apps.
kicks_home: '/tmp/kicks'

# Local respositories for Infopark gems.
# cloud_connector: '/Users/bob/Code/infopark_rails_connector/cloud_connector'
# kickstarter: '/Users/bob/Code/infopark_kickstarter'
      }
    end
  end
end

def parse_options
  @options = {}

  options_parser = OptionParser.new do |opts|
    opts.banner = %{Usage:
  kick-it APP_NAME [-cklfq]
  kick-it -[ev]
    }

    opts.on('-c', '--local-cc', 'Use local repo for Infopark Cloud Connector gem') do
      @options[:local_cc] = true
    end

    opts.on('-k', '--local-ks', 'Use local repo for Infopark Kickstarter gem') do
      @options[:local_ks] = true
    end

    opts.on('-l', '--local', 'Use local repos for all Infopark gems') do
      @options[:use_local] = true
    end

    opts.on('-f', '--force', 'Skip all confirmations (assume as confirmed)') do
      @options[:autoconfirm] = true
    end

    opts.on('-q', '--quiet', 'Minimize the output') do
      @options[:quiet] = true
    end

    opts.on('-e', '--edit-config', 'Open configuration file in $EDITOR') do
      exec("/usr/bin/env $EDITOR #{@config_file}") if ENV['EDITOR']
    end

    opts.on('-v', '--version', 'Print the version number') do
      puts VERSION
      exit 0
    end
  end

  options_parser.parse!
end

def load_config
  @config = YAML.load_file(@config_file)

  @kicks_home = @config['kicks_home']
  config_error('kicks_home') unless @kicks_home

  @app_dir = File.join(@kicks_home, @app_name)
end

def ensure_kicks_home_exists
  mkdir_p @kicks_home
end

def cleanup_app_dir
  if File.exists?(@app_dir)
    puts "[WARNING] Found application in '#{@app_dir}'."

    confirm 'Remove?' do
      rm_rf @app_dir
    end
  end
end

def generate_rails_app
  Dir.chdir(@kicks_home) do
    sh "rails _3.2.15_ new #{@app_name} --skip-active-record --skip-bundle"
  end
end

def patch_gemfile
  open(File.join(@app_dir, 'Gemfile'), 'a') do |f|
    if @options[:local_cc] || @options[:use_local]
      cloud_connector_dir = @config['cloud_connector']
      config_error('cloud_connector') unless cloud_connector_dir

      if File.exists?(cloud_connector_dir)
        info "Using gem 'infopark_cloud_connector' from '#{cloud_connector_dir}'."
        f.puts "gem 'infopark_cloud_connector', path: '#{cloud_connector_dir}'"
      else
        error "Missing '#{cloud_connector_dir}'."
      end
    else
      f.puts "gem 'infopark_cloud_connector'"
    end

    if @options[:local_ks] || @options[:use_local]
      kickstarter_dir = @config['kickstarter']
      config_error('kickstarter') unless kickstarter_dir

      if File.exists?(kickstarter_dir)
        info "Using gem 'infopark_kickstarter' from '#{kickstarter_dir}'."
        f.puts "gem 'infopark_kickstarter', path: '#{kickstarter_dir}'"
      else
        error "Missing '#{kickstarter_dir}'."
      end
    else
      f.puts "gem 'infopark_kickstarter'"
    end

    if @options[:local_cc] || @options[:local_ks] || @options[:use_local]
      f.puts %{
group :assets do
  gem 'less-rails'
  gem 'quiet_assets'
  gem 'therubyracer', require: 'v8'
  gem 'underscore-rails'
end

gem 'handlebars_assets', '~> 0.12.0'
      }
    end
  end
end

def create_handlebars_initializer
  if @options[:local_cc] || @options[:local_ks] || @options[:use_local]
    open(File.join(@app_dir, 'config/initializers/handbars_assets.rb'), 'w') do |f|
      f.puts "HandlebarsAssets::Config.template_namespace = 'InfoparkHandlebarsTemplates'"
    end
  end
end

def copy_project_configs
  %w[rails_connector.yml custom_cloud.yml].each do |config_name|
    config_file = File.join(@config_dir, config_name)
    error("Missing '#{config_file}'.") unless File.exists?(config_file)
    cp config_file, File.join(@app_dir, "config/#{config_name}")
  end
end

def assert_valid_tenant_name
  cms_api_url = YAML.load_file(File.join(@app_dir, 'config/rails_connector.yml'))['cms_api']['url']

  unless cms_api_url.include?('kickme')
    error %{Your project has no "kickme" in the name.
      For security reasons a project used with this tool MUST include a special string "kickme" in it's name, e.g. "fookickme123".
      See documentation for more details: https://github.com/kostia/kick-it.
    }
  end
end

def gitignore_project_configs
  open(File.join(@app_dir, '.gitignore'), 'w') do |f|
    f.puts %{
config/rails_connector.yml
config/custom_cloud.yml
    }
  end
end

def bundle_app
  sh 'bundle'
end

def run_kickstarter_generator
  sh 'rails g cms:kickstart --examples'
end

def reset_tenant
  confirm 'Reset tenant?' do
    sh 'bundle exec rake cms:reset[true]'
  end
end

def run_migrations
  sh 'bundle exec rake cms:migrate'
end

ensure_config_dir_exists
ensure_config_file_exists
parse_options

parse_app_name
load_config

ensure_kicks_home_exists
cleanup_app_dir
generate_rails_app

patch_gemfile
create_handlebars_initializer
copy_project_configs
assert_valid_tenant_name
gitignore_project_configs

Dir.chdir(@app_dir) do
  bundle_app
  run_kickstarter_generator
  reset_tenant
  run_migrations
end

puts %{

  Now start the app:

    cd #{@app_dir} && rails s -p3013

}
