#!/usr/bin/env ruby

require 'fileutils'
require 'json'
require 'open-uri'
require 'optparse'
require 'yaml'

include FileUtils

VERSION = '0.1.4'
RAILS_VERSION = '3.2.15' # See https://dev.infopark.net/preparation

def sh(cmd)
  output = %x{#{cmd} 2>&1}

  error(output) unless $?.success?

  quiet = @options[:quiet] || @config['quiet']
  puts output unless quiet
end

def supports_colored_output?
  %x{tput colors 2>/dev/null}.to_i > 0
end

def cololize(text, color_code)
  supports_colored_output? ? "\e[#{color_code}m#{text}\e[0m" : text
end

def red(text)
  cololize(text, 31)
end

def green(text)
  cololize(text, 32)
end

def yellow(text)
  cololize(text, 33)
end

def blue(text)
  cololize(text, 34)
end

def prompt(label, alt)
  print(green(label))
  input = STDIN.gets.chomp
  input == '' ? alt : input
end

def confirm(label)
  if @options[:autoconfirm] || @config['force']
    yield if block_given?
  else
    case prompt("#{label} [Y/n]: ", 'y').downcase
    when 'y', 'yes'
      yield if block_given?
    when 'n', 'no'
      puts red('Exiting...')
      exit 0
    else
      puts red("Huh?... Don't know what you mean. Exiting!")
      exit 1
    end
  end
end

def error(message)
  puts red("[ERROR] #{message}")
  exit 1
end

def config_error(key)
  error("Missing configuration key '#{key}' in '#{@config_file}'.")
end

def assert_env_var(var_name)
  error("Missing environment variable $#{var_name}.") unless ENV[var_name]
end

def info(message)
  puts blue("[INFO] #{message}")
end

def warn(message)
  puts yellow("[WARNING] #{message}")
end

def calculate_app_dir(app_name)
  File.join(@kicks_home, app_name)
end

def ensure_config_dir_exists
  @config_dir = File.join(ENV['HOME'], '.config/kick-it')
  mkdir_p @config_dir
end

def ensure_config_file_exists
  @config_file = File.join(@config_dir, 'config.yml')

  unless File.exists?(@config_file)
    info "Generating initial config in '#{@config_file}'. You may wish to change it with 'kick-it -e' command."

    open(@config_file, 'w') do |f|
      f.puts %{#
# Configuration file for "Kick It!".
# See https://github.com/infopark/kick-it for details.
#
# Find me in '~/.config/kick-it/config.yml'.
# Edit me with 'kick-it -e' command.
#

#
# Where to put the generated apps.
#
kicks_home: '/tmp/kicks'

#
# Local respositories for Infopark gems.
# Uncomment following to enable usage of local repositories.
#
# cloud_connector: '/Users/bob/Code/infopark_rails_connector/cloud_connector'
# kickstarter:     '/Users/bob/Code/infopark_kickstarter'

#
# Default options for kicking apps.
#
force:                 false # Same as the "-f" CLI option.
local:                 false # Same as the "-l" CLI option.
local_cloud_connector: false # Same as the "-c" CLI option.
local_kickstarter:     false # Same as the "-k" CLI option.
quiet:                 false # Same as the "-q" CLI option.
      }
    end
  end
end

def load_config
  @config = YAML.load_file(@config_file)
  @kicks_home = @config['kicks_home']
  config_error('kicks_home') unless @kicks_home
end

def parse_app_name
  @app_name = if ARGV.first
               ARGV.first.chomp
             else
               error "Missing 'APP_NAME'. See 'kick-it -h' for help."
             end
  @app_dir = calculate_app_dir(@app_name)
end

def parse_options
  @options = {}

  options_parser = OptionParser.new do |opts|
    opts.banner = %{Usage:
  Generate an app:           kick-it APP_NAME [-cklfq] [-p PROJECT_NAME]
  Open an app:               kick-it -o APP_NAME
  Edit global configuration: kick-it -e
  Import project ZIP:        kick-it -i PATH_TO_ZIP [-p PROJECT_NAME]
  Help and version:          kick-it [-hv]
    }

    opts.on('-c', '--local-cloud-connector', 'Use local repo for Infopark Cloud Connector gem') do
      @options[:local_cc] = true
    end

    opts.on('-k', '--local-kickstarter', 'Use local repo for Infopark Kickstarter gem') do
      @options[:local_ks] = true
    end

    opts.on('-l', '--local', 'Use local repos for all Infopark gems') do
      @options[:use_local] = true
    end

    opts.on('-f', '--force', 'Skip all confirmations (assume as confirmed)') do
      @options[:autoconfirm] = true
    end

    opts.on('-q', '--quiet', 'Minimize the output') do
      @options[:quiet] = true
    end

    opts.on('-o app_name', '--open-app app_name', 'Open kicked app in $EDITOR') do |app_name|
      app_dir = calculate_app_dir(app_name)

      if File.exists?(app_dir)
        Dir.chdir(app_dir) do
          assert_env_var('EDITOR')
          exec("/usr/bin/env $EDITOR .")
        end
      else
        error("App '#{app_dir}' doesn't exist.")
      end
    end

    opts.on('-e', '--edit-config', 'Open configuration file in $EDITOR') do
      assert_env_var('EDITOR')
      exec("/usr/bin/env $EDITOR #{@config_file}")
    end

    opts.on('-i path', '--import path', 'Import project settings ZIP') do |path|
      @options[:action] = :import
      @options[:zip_path] = path
    end

    opts.on('-p project_name', '--project project_name',
        'Use alternative project configuration') do |project_name|
      info "Using project '#{project_name}'."
      @options[:project_name] = project_name
    end

    opts.on('-v', '--version', 'Print the version number') do
      puts VERSION
      exit 0
    end
  end

  options_parser.parse!
end

def make_joke
  joke = JSON.parse(open('http://api.icndb.com/jokes/random').read)['value']['joke']

  if joke and joke.size > 0
    puts %{
    #{joke.upcase}
  }
  end
rescue
end

def ensure_kicks_home_exists
  mkdir_p @kicks_home
end

def cleanup_app_dir
  if File.exists?(@app_dir)
    warn "Found application in '#{@app_dir}'."
    confirm 'Remove?' do
      rm_rf @app_dir
    end
  end
end

def ensure_rails_installed
  sh "gem list rails|grep #{RAILS_VERSION} || gem install rails -v #{RAILS_VERSION}"
end

def generate_rails_app
  Dir.chdir(@kicks_home) do
    sh "rails _#{RAILS_VERSION}_ new #{@app_name} --skip-active-record --skip-bundle"
  end
end

def use_anything_local?
  use_local_cc? || use_local_ks?
end

def use_local_cc?
  @options[:local_cc] || @options[:use_local] ||
      @config['local_cloud_connector'] || @config['local']
end

def use_local_ks?
  @options[:local_ks] || @options[:use_local] ||
      @config['local_kickstarter'] || @config['local']
end

def patch_gemfile
  open(File.join(@app_dir, 'Gemfile'), 'a') do |f|
    if use_local_cc?
      cloud_connector_dir = @config['cloud_connector']
      config_error('cloud_connector') unless cloud_connector_dir

      if File.exists?(cloud_connector_dir)
        info "Using gem 'infopark_cloud_connector' from '#{cloud_connector_dir}'."
        f.puts "gem 'infopark_cloud_connector', path: '#{cloud_connector_dir}'"
      else
        error "Missing '#{cloud_connector_dir}'."
      end
    else
      f.puts "gem 'infopark_cloud_connector'"
    end

    if use_local_ks?
      kickstarter_dir = @config['kickstarter']
      config_error('kickstarter') unless kickstarter_dir

      if File.exists?(kickstarter_dir)
        info "Using gem 'infopark_kickstarter' from '#{kickstarter_dir}'."
        f.puts "gem 'infopark_kickstarter', path: '#{kickstarter_dir}'"
      else
        error "Missing '#{kickstarter_dir}'."
      end
    else
      f.puts "gem 'infopark_kickstarter'"
    end

    if use_anything_local?
      f.puts %{
group :assets do
  gem 'less-rails'
  gem 'quiet_assets'
  gem 'therubyracer', require: 'v8'
  gem 'underscore-rails'
end

gem 'handlebars_assets', '~> 0.12.0'
      }
    end
  end
end

def create_handlebars_initializer
  if use_anything_local?
    open(File.join(@app_dir, 'config/initializers/handbars_assets.rb'), 'w') do |f|
      f.puts "HandlebarsAssets::Config.template_namespace = 'InfoparkHandlebarsTemplates'"
    end
  end
end

def copy_project_configs
  config_dir = if project_name = @options[:project_name]
                 File.join(@config_dir, project_name)
               else
                 @config_dir
               end

  %w[rails_connector.yml custom_cloud.yml].each do |config_name|
    config_file = File.join(config_dir, config_name)
    error("Missing '#{config_file}'.") unless File.exists?(config_file)
    cp config_file, File.join(@app_dir, "config/#{config_name}")
  end
end

def assert_valid_tenant_name
  cms_api_url = YAML.load_file(File.join(@app_dir, 'config/rails_connector.yml'))['cms_api']['url']

  unless cms_api_url.include?('kickme')
    error %{Your project has no "kickme" in the name.
      For security reasons a project used with this tool MUST include a special string "kickme" in it's name, e.g. "fookickme123".
      See documentation for more details: https://github.com/infopark/kick-it.
    }
  end
end

def git_commit_application
  sh 'git init'
  sh 'git add -A'
  sh 'git commit -m "Initial commit"'
end

def bundle_app
  sh 'bundle'
end

def run_kickstarter_generator
  sh 'rails g cms:kickstart --examples'
end

def reset_tenant
  runner_scripts_dir = File.join(@app_dir, 'lib/runner')
  mkdir_p runner_scripts_dir

  reset_tenant_runner_script = File.join(runner_scripts_dir, 'reset_tenant.rb')
  open(reset_tenant_runner_script, 'w') do |f|
    f.puts %q{
tenant_name = RailsConnector::Configuration.cms_url.match(/\/\/(.*?)\./)[1]
revision_id = RailsConnector::Workspace.default.revision_id

RailsConnector::CmsRestApi.delete('workspaces', {
  revision_id: revision_id,
  tenant_name: tenant_name,
})
    }
  end

  confirm 'Reset tenant?' do
    sh "rails runner #{reset_tenant_runner_script}"
  end
end

def run_migrations
  sh 'bundle exec rake cms:migrate'
end

def publish_migrations
  sh 'bundle exec rake cms:migrate:publish'
end

def import_config
  path = @options[:zip_path]

  if File.exists?(path)
    target_dir = if project_name = @options[:project_name]
                   File.join(@config_dir, project_name)
                 else
                   @config_dir
                 end
    mkdir_p target_dir
    sh "unzip -o #{path} -d #{target_dir}"
  else
    error "Missing '#{path}'."
  end
end

def generate_app
  parse_app_name
  make_joke
  ensure_kicks_home_exists
  cleanup_app_dir
  ensure_rails_installed
  generate_rails_app

  patch_gemfile
  create_handlebars_initializer
  copy_project_configs
  assert_valid_tenant_name

  Dir.chdir(@app_dir) do
    bundle_app
    run_kickstarter_generator
    reset_tenant
    run_migrations
    publish_migrations
    git_commit_application
  end

  puts green(%{

    Now start the app:

      cd #{@app_dir} && rails s -p3013

  })
end

ensure_config_dir_exists
ensure_config_file_exists
load_config

parse_options

if @options[:action] == :import
  import_config
else
  generate_app
end
