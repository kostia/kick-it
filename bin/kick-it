#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'

include FileUtils

VERSION = '0.0.4'

@options = {}

options_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: kick-it APP_NAME [OPTIONS]'

  opts.on('-c', '--local-cc', 'Use local repo for Infopark Cloud Connector gem') do
    @options[:local_cc] = true
  end

  opts.on('-k', '--local-ks', 'Use local repo for Infopark Kickstarter gem') do
    @options[:local_ks] = true
  end

  opts.on('-L', '--local', 'Use local repos for all Infopark gems') do
    @options[:use_local] = true
  end

  opts.on('-f', '--force', 'Skip all confirmations (assume as confirmed)') do
    @options[:autoconfirm] = true
  end

  opts.on('-q', '--quiet', 'Minimize the output') do
    @options[:quiet] = true
  end

  opts.on('-v', '--version', 'Print the version number') do
    puts VERSION
    exit 0
  end
end

options_parser.parse!

app_name = if ARGV.first
             ARGV.first.chomp
           else
             puts "What's your app's name? "
             app_name = STDIN.gets.chomp
           end

kick_it_dir = '/tmp/kick-it'
app_dir = File.join(kick_it_dir, app_name)
mkdir_p kick_it_dir

def sh(cmd)
  if @options[:quiet]
    %x{#{cmd}}
  else
    puts %x{#{cmd}}
  end
end

def prompt(label, alt)
  print(label)
  input = STDIN.gets.chomp
  input == '' ? alt : input
end

def confirm(label)
  if @options[:autoconfirm]
    yield
  else
    case prompt("#{label} [Y/n]: ", 'y').downcase
    when 'y', 'yes'
      yield
    when 'n', 'no'
      exit 0
    else
      puts "Huh?... Don't know what you mean. Exiting!"
      exit 1
    end
  end
end

if File.exists?(app_dir)
  puts "[WARNING] Found application in '#{app_dir}'."

  confirm 'Remove?' do
    rm_rf app_dir
  end
end

Dir.chdir(kick_it_dir) do
  sh "rails _3.2.15_ new #{app_name} --skip-active-record --skip-bundle"
end

kick_it_config_dir = File.join(ENV['HOME'], '.config/kick-it')
mkdir_p kick_it_config_dir

open(File.join(app_dir, 'Gemfile'), 'a') do |f|
  cloud_connector_dir = File.expand_path(File.join(kick_it_config_dir, 'infopark_cloud_connector'))
  if (@options[:local_cc] || @options[:use_local]) && File.exists?(cloud_connector_dir)
    real_cloud_connector_dir = File.readlink(cloud_connector_dir)
    puts "[INFO] Using gem 'infopark_cloud_connector' from '#{real_cloud_connector_dir}'."
    @bundled_local_gems = true
    f.puts "gem 'infopark_cloud_connector', path: '#{real_cloud_connector_dir}'"
  else
    f.puts "gem 'infopark_cloud_connector'"
  end

  kickstarter_dir = File.expand_path(File.join(kick_it_config_dir, 'infopark_kickstarter'))
  if (@options[:local_ks] || @options[:use_local]) && File.exists?(kickstarter_dir)
    real_kickstarter_dir = File.readlink(kickstarter_dir)
    puts "[INFO] Using gem 'infopark_kickstarter' from '#{real_kickstarter_dir}'."
    @bundled_local_gems = true
    f.puts "gem 'infopark_kickstarter', path: '#{real_kickstarter_dir}'"
  else
    f.puts "gem 'infopark_kickstarter'"
  end

  if (@options[:local_cc] || @options[:local_ks] || @options[:use_local]) && @bundled_local_gems
    f.puts %{
group :assets do
  gem 'less-rails'
  gem 'therubyracer', require: 'v8'
  gem 'underscore-rails'
end

gem 'handlebars_assets', '~> 0.12.0'
    }
  end
end

if (@options[:local_cc] || @options[:local_ks] || @options[:use_local]) && @bundled_local_gems
  open(File.join(app_dir, 'config/initializers/handbars_assets.rb'), 'w') do |f|
    f.puts "HandlebarsAssets::Config.template_namespace = 'InfoparkHandlebarsTemplates'"
  end
end

rails_connector_config = File.join(kick_it_config_dir, 'rails_connector.yml')
custom_cloud_config = File.join(kick_it_config_dir, 'custom_cloud.yml')

begin
  cp rails_connector_config, File.join(app_dir, 'config/rails_connector.yml')
  cp custom_cloud_config, File.join(app_dir, 'config/custom_cloud.yml')
rescue
  puts "[ERROR] You have no project configurations in '#{kick_it_config_dir}'."
  exit 1
end

open(File.join(app_dir, '.gitignore'), 'w') do |f|
  f.puts %{
config/rails_connector.yml
config/custom_cloud.yml
  }
end

Dir.chdir(app_dir) do
  sh 'bundle'
  sh 'rails g cms:kickstart --examples'

  confirm 'Reset tenant?' do
    sh 'bundle exec rake cms:reset[true]'
  end

  sh 'bundle exec rake cms:migrate'
end

puts %{

  Now start the app:

    cd #{app_dir} && rails s -p3013

}
